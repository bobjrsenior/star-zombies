<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Players Directional Speed
hsp = 0;
vsp = 0;

angle = 0;
image_speed = 0;
image_index = 13;
frame_count = 0;
frame_dir = 1;
move_dir = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w = keyboard_check_direct(ord('W'));
a = keyboard_check_direct(ord('A'));
s = keyboard_check_direct(ord('S'));
d = keyboard_check_direct(ord('D'));

x_change = obj_Cursor.x - x;
y_change = obj_Cursor.y - y;

target_dir = point_direction(x, y, mouse_x, mouse_y);

// Calculate the difference to the target direction...
diff = target_dir - image_angle;
// and warp it around -180 and 180...
while (diff &gt; 180) diff -= 360;
while (diff &lt; -180) diff += 360;
// then turn the object in the shorter way.
if (abs(diff) &lt; 1000) {
// In this case, make the object precisely fact to the target to avoid shaking.
image_angle = target_dir;
}
else {
image_angle += sign(diff) * 1000;
}

//image_angle = -angle;
frame_count += frame_dir;
if(frame_count &gt;= 2){
    frame_dir *= -1;
}
else if(frame_count &lt;= 0){
    frame_dir *= -1;
}
if(w){
    vsp = -4;
    image_index = 1 + frame_count;
    move_dir = 0;
}
else if(s){
    vsp = 4;
    image_index = 12 + frame_count;
        move_dir = 1;
}
else{
    vsp = 0;
}
if(a){
    hsp = -4;
    image_index = 4 + frame_count;
        move_dir = 2;
}
else if(d){
    hsp = 4;
    image_index = 8 + frame_count;
        move_dir = 3;
}
else{
    hsp = 0;
}

if(move_dir == 0){
    image_index = 0;
}
else if(move_dir == 1){
    image_index = 11;
}
else if(move_dir == 2){
    image_index = 3;
}
else if(move_dir == 3){
    image_index = 7;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision~
if(place_meeting(x,y,obj_Wall)){
    if(!place_meeting(x+16,y,obj_Wall)){
        while(place_meeting(x,y,obj_Wall)){
            x += 1;
        }
    }
    else if(!place_meeting(x-16,y,obj_Wall)){
        while(place_meeting(x,y,obj_Wall)){
            x -= 1;
        }
    }
    else if(!place_meeting(x,y+11,obj_Wall)){
        while(place_meeting(x,y,obj_Wall)){
            y += 1;
        }
    }
    else if(!place_meeting(x,y-11,obj_Wall)){
        while(place_meeting(x,y,obj_Wall)){
            y -= 1;
        }
    }
    else if(!place_meeting(x+16,y+11,obj_Wall)){
        while(place_meeting(x,y,obj_Wall)){
            y += 1;
            x += 1;
        }
    }
    else{
        while(place_meeting(x,y,obj_Wall)){
            y -= 1;
            x -= 1;
        } 
    }
}
if (place_meeting(x+hsp,y,obj_Wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_Wall)){
        x += sign(hsp);
    }
    hsp=0;
}
if (place_meeting(x,y+vsp,obj_Wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_Wall)){
        y += sign(vsp);
    }
    vsp=0;
}


x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,16</point>
    <point>20,16</point>
  </PhysicsShapePoints>
</object>
